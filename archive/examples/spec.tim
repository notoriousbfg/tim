// indexed list
('Tim', 27)

// assoc list, can also behave like indexed
(name: 'Tim', age: 27)

// variables
(names: ('Tim', 'Paul'))

(treesAndColours: (fir (name 'Fir', colour 'Green')))
treesAndColours.get("fir.name") // 'Fir'
treesAndColours.get(0).get(0) // 'Fir'

// function
(helloWorld: (name) => {
    >> ("hello ", name).join()
})
// lambda func
(helloWorld: (name) => >> "Hello " . name)
(helloNames: (...names).each(helloWorld))

// no args
().call(myFun)

// if/else
?(
    firstCond: (true) => // do this, // what about named conditions? i.e. the conditional statement is a dict?
    (false) => // don't do this,
    () => // else
)

// loops
.each
.filter
.map